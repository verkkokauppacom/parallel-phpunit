#!/bin/bash
set -f
VERSION='1.3.0'
PID=$$
ROOT="${@: -1}" # last argument
ROOT="${ROOT%/}" # strip the last slash
TMP=`mktemp -d 2> /dev/null`
(test -n "${TMP}" && test -d "${TMP}") || ! TMP="/tmp/${PID}" || mkdir -p ${TMP} || exit 1
ARGS="${@:1:$(($#-1))}" # remove last argument
PHPUNIT_ARG=''
CFG_MAX_THREAD=3
CFG_PHPUNIT_CMD=`which phpunit 2> /dev/null || echo $0 | sed 's|parallel-phpunit$|phpunit|'`
TEST_SUFFIX="Test.php,.phpt"
TEST_FILTER="."
RETRIES=0
VERBOSE=false

function show_help {
    echo "Paralleling options:"
    echo "    --pu-cmd - custom phpunit run script, default: first phpunit in PATH or phpunit next to parallel-phpunit"
    echo "    --pu-threads - max threads, default $CFG_MAX_THREAD"
    echo "    --pu-retries - how many times to rerun the test file if it fails"
    echo "    --pu-verbose - print all phpunit commands and their output, otherwise only failing commands are written"
    echo "Usage: parallel-phpunit [switches] <directory>"
    exit 1
}

function set_config {
    local pos=`echo "$1" | sed 's|=.*||' | wc -c`
    local paramName=${1:0:$pos-1}
    local paramValue=${1:$pos}
    case $paramName in
        --pu-threads)
            test "$paramValue" -lt 1 || CFG_MAX_THREAD="$paramValue"
            ;;
        --pu-retries)
            test "$paramValue" -lt 0 || RETRIES="$paramValue"
            ;;
        --pu-verbose)
            VERBOSE=true
            ;;
        --pu-cmd)
            CFG_PHPUNIT_CMD="$paramValue"
            ;;
    esac
}


function test_files {
    local match_files=""
    local names=`echo "$TEST_SUFFIX" | sed 's|^| -name *|g' | sed 's|,| -o -name *|'`
    for file in `find $ROOT $names`
    do
        local pattern=`echo "${TEST_FILTER}" | sed 's|::|.*|'`
        (cat $file | tr '\n' ' ' | tr '\r' ' ' | tr '\t' ' ' | sed 's|  | |g' | grep -q "$pattern") && match_files="$file $match_files"
    done
    echo "$match_files" | sort
}

function replace {
    echo "$1 " | sed "s|--$2[ ][ ]*[^ ][^ ]*|--$2 $3|"
}

function set_variable_from_arguments {
    argument_value=`echo "$PHPUNIT_ARG " | sed "s|.*--${2}[ =]*||" | sed 's| .*||'`
    test -z "$argument_value" || eval $1="$argument_value"
}

# http://fvue.nl/wiki/Bash:_Check_if_array_element_exists
function in_array() {
    local hay needle=$1
    shift
    for hay; do
        [[ $hay == $needle ]] && return 0
    done
    return 1
}


# when use shell script for run test, you have wrong count child phpunit process
function child_processes {
    declare -a child_list=("${!1}")
    local active=()
    local counter=0
    active=(`pgrep -P ${PID}`)
    local i=0
    while [ $i -lt $CFG_MAX_THREAD ]
    do
        local pid=${child_list[$i]}
        in_array $pid ${active[@]}
        if [ $? -eq 0 ];then
            counter=`expr $counter + 1`
        fi
        i=`expr $i + 1`
    done
    echo "$counter"

}


function count {
    grep -o "$1" <<< "$progress" | wc -l | sed 's| *||'
}


function print_summary {
    progress=`find ${TMP}/ -name "parallel-phpunit.*.log" -exec cat {} \; -exec echo \; | perl -pe 's/\e\[?.*?[\@-~]//g' | grep "^[\.FESI][\.FESI]*$"`
    progress=$progress`find ${TMP}/ -name parallel-phpunit.*.log -exec cat {} \; -exec echo \; | perl -pe 's/\e\[?.*?[\@-~]//g' | grep "^[\.FESI][\.FESI]* " | sed 's| .*||'`
    echo "Success: `count '\.'` Fail: `count F` Error: `count E` Skip: `count S` Incomplete: `count I`"
}


function write_combined_junit {
    mkdir -p `dirname $1`
    echo "<testsuites>" > $1
    find ${TMP}/ -name parallel-phpunit.*.junit -exec cat {} \; | grep -v "^<?xml" | grep -v testsuites >> $1
    echo "</testsuites>" >> $1
}


function on_exit {
    for cid in $threads
    do
        if [ $cid -gt 0 ];then
            pkill -TERM -P ${cid} &
        fi
    done
    while [ `child_processes threads[@]` -gt 0 ]
    do
        sleep 0.1
    done
    rm -rf ${TMP}/
}


function refresh_threads {
    declare -a child_list=("${!1}")
    local active=()
    active=(`pgrep -P ${PID}`)
    local i=0
    while [ $i -lt $CFG_MAX_THREAD ]
    do
        local pid=${child_list[$i]}
        in_array $pid ${active[@]}
        if [ ! $? -eq 0 ];then
            child_list[$i]=0
        fi
        i=`expr $i + 1`
    done
    echo ${child_list[@]}
}


function get_free_thread {
    declare -a child_list=("${!1}")
    local i=0
    while [ $i -lt $CFG_MAX_THREAD ]
    do
        if [ ${child_list[$i]} -eq 0 ];then
            echo $i
            return
        fi
    i=`expr $i + 1`
    done
    echo '-1'
}

function run_command {
    local exit_status=0
    local log_file=$1
    shift
    for retry in `seq 0 $RETRIES`
    do
        test 0 -eq $retry || echo "Retry($retry/$RETRIES): $@"
        ! $VERBOSE || echo "Starting command: $@"
        $@ &> $log_file
        exit_status=$?
        ! $VERBOSE || echo "Command ended: $@"
        ! $VERBOSE || cat $log_file
        test $exit_status -eq 0 && return $exit_status
        $VERBOSE || echo "Command failed: $@"
        $VERBOSE || cat $log_file
        cat $log_file | perl -pe 's/\e\[?.*?[\@-~]//g' | grep "^[\.FESI][\.FESI]*$" | grep -q F
        test $? -eq 0 || (echo F >> $log_file)
    done
    touch ${TMP}/fail
}

echo "Running parallel-phpunit $VERSION"

#check parameters

if [ ! -d "$ROOT" ];then
    show_help
    exit 1
fi

#extract extended options
ARGS=`echo "$ARGS" | sed 's|--pu-threads[ =]*|--pu-threads=|' | sed 's|--pu-cmd[ =]*|--pu-cmd=|' | sed 's|--pu-retries[ =]*|--pu-retries=|'`
for param in $ARGS
do
    if [ ${param:0:4} = '--pu' ];then
        set_config "$param"
    else
        PHPUNIT_ARG="$PHPUNIT_ARG $param"
    fi
done

(echo "$ARGS" | grep -q '\-\-coverage\-') && echo "warning: coverage switches (--coverage-*) are passed directly to parallel phpunit commands so you probably don't want to use them" 1>&2
(echo "$ARGS" | grep '\-\-log\-' | grep -vq 'log\-junit') && echo "warning: logging switches (--log-*) are passed directly to parallel phpunit commands so you probably don't want to use them" 1>&2
(echo "$ARGS" | grep -q '\-\-testdox\-') && echo "warning: TestDox switches (--testdox-*) are passed directly to parallel phpunit commands so you probably don't want to use them" 1>&2

# init vars
threads=()
i=0
true & # ensure that $! is set
while [ $i -lt $CFG_MAX_THREAD ]
do
    threads[$i]=0
    i=`expr $i + 1`
done

junit_file=`echo "$PHPUNIT_ARG" | grep "\-\-log-junit=" | sed 's|.*--log-junit=[ ]*||' | sed 's| .*||'`
set_variable_from_arguments TEST_SUFFIX test-suffix
set_variable_from_arguments TEST_FILTER filter

trap "on_exit" EXIT

#execute tests
i=0
for filename in `test_files`
do
    #check active process
    j=0
    while [ `child_processes threads[@]` -ge $CFG_MAX_THREAD ]
    do
        j=`expr $j + 1`
        sleep 0.1
        test $j -ge 10 && print_summary && j=0
    done
    prefix="${TMP}/parallel-phpunit.${i}"
    i=`expr $i + 1`
    #get free thread number
    threads=( $(refresh_threads threads[@]) )
    thread_id=`get_free_thread threads[@]`
    #execute
    #thread number can be use in tests, example: choose free selenium host
    command="$CFG_PHPUNIT_CMD -d parallel-phpunit-thread=${thread_id} `echo "${PHPUNIT_ARG}" | sed "s|${junit_file}|${prefix}.junit|"` $filename"
    run_command ${prefix}.log $command &
    threads[$thread_id]=$!
done

#report progress when some phpunit execution is still running
j=0
while [ `child_processes threads[@]` -gt 0 ]
do
    j=`expr $j + 1`
    sleep 0.1
    test $j -ge 10 && print_summary && j=0
done

print_summary

test -z "$junit_file" || write_combined_junit $junit_file
! test -f ${TMP}/fail
